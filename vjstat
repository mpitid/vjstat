#!/usr/bin/env python

"""
Real-time visualisation of the JVM heap via `jstat`.
"""

import sys, argparse, zmq, pyqtgraph as pg
from pyqtgraph.Qt import QtGui, QtCore
from collections import deque, defaultdict
from functools import partial


def main(args):
    opts = parse_cli(args[1:])
    app = QtGui.QApplication(args)
    win = pg.GraphicsWindow(title="JVM Heap Plot")
    win.setWindowTitle("JVM Heap Plot")
    pg.setConfigOptions(antialias=True)

    plots = dict()
    size = None if opts.window <= 0 else opts.window
    data = defaultdict(partial(deque, maxlen=size))
    mapping = dict(eu=5, s0=2, s1=3, ou=7)

    for key, title in [('eu', 'eden space'),
                       ('s0', 'survivor space 0'),
                       ('s1', 'survivor space 1'),
                       ('ou', 'tenured space')]:
        plot = win.addPlot(title=title)
        plot.showGrid(x=True, y=True)
        plot.setLabel('left', 'size', units='B')
        plot.setLabel('bottom', 'time', units='%dms' % opts.interval)
        plots[key] = plot.plot(list(data[key]))
        win.nextRow()

    timer = QtCore.QTimer()
    timer.timeout.connect(partial(update_plots, data, plots))
    timer.start(opts.interval)
    stream = socket_stream(opts.socket, opts.type) if opts.socket else sys.stdin
    thread = Thread(partial(process, stream, data, mapping))
    thread.start()
    QtGui.QApplication.instance().exec_()

def update_plots(data, plots):
    for key, plot in plots.iteritems():
        plot.setData(data[key])

socket_types = dict(pull=zmq.PULL, sub=zmq.SUB)

def socket_stream(address, type):
    ctx = zmq.Context.instance()
    socket = ctx.socket(socket_types[type])
    if '*' in address:
        socket.bind(address)
    else:
        socket.connect(address)
    while True:
        yield socket.recv_string()

def file_stream(stream):
    while True:
        yield stream.readline().rstrip('\n')

def process(stream, data, mapping):
    for i, line in enumerate(stream, 1):
        if not line.strip() or line.startswith(' '):
            continue
        columns = line.split()
        sys.stdout.write("\r%d %d" % (len(columns), i))
        sys.stdout.flush()
        if len(columns) < 7:
            continue
        for key, idx in mapping.iteritems():
            data[key].append(int(float(columns[idx]) * 1024))

class Thread(QtCore.QThread):
    def __init__(self, function, parent=None):
        self.function = function
        super(Thread, self).__init__(parent)
    def run(self):
        self.function()

def parse_cli(args):
    parser = argparse.ArgumentParser(description="visualise the JVM heap in real-time")
    add = parser.add_argument
    add('socket', nargs='?',
        help='zmq socket address')
    add('type', nargs='?', default='sub', choices=socket_types,
        help='zmq socket type (%(default)r)')
    add('-w', '--window', default=1000, type=int,
        help='visualise the last WINDOW values (%(default)r)')
    add('-i', '--interval', type=int, default=100,
        help='update interval in milliseconds (%(default)r)')
    return parser.parse_args(args)

if __name__ == '__main__':
   sys.exit(main(sys.argv))

